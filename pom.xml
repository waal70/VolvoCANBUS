<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.waal70.canbus</groupId>
	<artifactId>VolvoCANBUS</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>VolvoCANBUS</name>
	<description>Doing Volvo p2 canbus stuff</description>
	<dependencies>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>5.4.0-M1</version>
		</dependency>
		<dependency>
			<groupId>org.waal70.canbus</groupId>
			<artifactId>libsocket-can-java</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>13-ea+9</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>13-ea+9</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.16.0</version>
		</dependency>
	</dependencies>
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Create a target.properties file in your project root that contains 
			the appropriate properties (pi.user, pi.password) -->
		<propertiesFile>target.properties</propertiesFile>
	</properties>
	<build>
		<finalName>${project.artifactId}-${project.version}</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-invoker-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<setupIncludes>
						<setupInclude>../libsocket-can-java/pom.xml</setupInclude>
					</setupIncludes>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.1.1</version>
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<archive>
						<manifest>
							<mainClass>org.waal70.canbus.application.VolvoCANBUS</mainClass>
						</manifest>
					</archive>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id> <!-- this is used for inheritance merges -->
						<phase>package</phase> <!-- bind to the packaging phase -->
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version> <!-- Specific due to memory leak in 2.20 -->
				<dependencies>
					<!--Custom provider and engine for Junit 5 to surefire -->
					<dependency>
						<groupId>org.junit.platform</groupId>
						<artifactId>junit-platform-surefire-provider</artifactId>
						<version>1.0.1</version>
					</dependency>
					<dependency>
						<groupId>org.junit.jupiter</groupId>
						<artifactId>junit-jupiter-engine</artifactId>
						<version>5.0.1</version>
					</dependency>
				</dependencies>
				<configuration>
					<argLine>${argLine}</argLine>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0.0</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>${basedir}/${propertiesFile}</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>pi-deploy</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>package-antrun</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- ensure the target directory exists on the Raspberry Pi -->
										<sshexec host="${pi.host}" port="${pi.port}"
											username="${pi.user}" password="${pi.password}" trust="true"
											failonerror="false" verbose="true"
											command="mkdir --parents ${pi.deployDirectory}" />

										<!-- copy the JAR file to the Raspberry Pi -->
										<scp
											file="${project.build.directory}/${project.build.finalName}-jar-with-dependencies.jar"
											todir="${pi.user}:${pi.password}@${pi.host}:${pi.deployDirectory}"
											port="${pi.port}" trust="true" verbose="true"
											failonerror="true">
										</scp>

										<!-- run the JAR file on the Raspberry Pi -->
										<sshexec host="${pi.host}" port="${pi.port}"
											username="${pi.user}" password="${pi.password}" trust="true"
											failonerror="false" verbose="true"
											command="java -jar ${pi.deployDirectory}/${project.build.finalName}-jar-with-dependencies.jar" />
									</target>
								</configuration>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>org.apache.ant</groupId>
								<artifactId>ant-jsch</artifactId>
								<version>1.9.6</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>local-run</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.6.0</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<mainClass>org.waal70.canbus.application.VolvoCANBUS</mainClass>
									<arguments>
										<argument>myArg1</argument>
										<argument>myArg2</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>